package com.cursormod.client.renderer;

import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.*;
import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderContext;
import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderEvents;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.phys.Vec3;
import org.joml.Matrix4f;

/**
 * –†–µ–Ω–¥–µ—Ä–µ—Ä –ø–æ–ª–æ—Å –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞–¥ –º–æ–±–∞–º–∏.
 * –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–æ–∫ –∫ —Å–º–µ—Ä—Ç–∏! üíÄ
 */
public class HealthBarRenderer {
    
    private static final float BAR_WIDTH = 0.5f;
    private static final float BAR_HEIGHT = 0.08f;
    private static final float BAR_Y_OFFSET = 0.5f;
    private static final double MAX_RENDER_DISTANCE = 32.0; // –ù–µ –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ 32 –±–ª–æ–∫–∞
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ —Å–æ–±—ã—Ç–∏–π Fabric
     */
    public static void register() {
        WorldRenderEvents.AFTER_ENTITIES.register(HealthBarRenderer::renderHealthBars);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
     */
    private static void renderHealthBars(WorldRenderContext context) {
        Minecraft mc = Minecraft.getInstance();
        if (mc.level == null || mc.player == null) {
            return;
        }
        
        Vec3 cameraPos = context.camera().getPosition();
        PoseStack poseStack = context.matrixStack();
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∂–∏–≤—ã–º —Å—É—â–Ω–æ—Å—Ç—è–º –≤ –º–∏—Ä–µ
        for (LivingEntity entity : mc.level.getEntitiesOfClass(LivingEntity.class, 
                mc.player.getBoundingBox().inflate(MAX_RENDER_DISTANCE))) {
            
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∏–≥—Ä–æ–∫–∞ (—É –Ω–µ–≥–æ —Å–≤–æ–π UI)
            if (entity == mc.player) {
                continue;
            }
            
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ä—Ç–≤—ã–º (—Ö–æ—Ç—è —ç—Ç–æ –±—ã–ª–æ –±—ã —Ü–∏–Ω–∏—á–Ω–æ)
            if (!entity.isAlive()) {
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            Vec3 entityPos = entity.position();
            double distance = cameraPos.distanceTo(entityPos);
            if (distance > MAX_RENDER_DISTANCE) {
                continue;
            }
            
            renderHealthBar(poseStack, entity, cameraPos, context.camera().getYRot(), 
                           context.camera().getXRot());
        }
    }
    
    /**
     * –†–∏—Å—É–µ—Ç –ø–æ–ª–æ—Å—É –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
     */
    private static void renderHealthBar(PoseStack poseStack, LivingEntity entity, 
                                       Vec3 cameraPos, float cameraYaw, float cameraPitch) {
        
        float health = entity.getHealth();
        float maxHealth = entity.getMaxHealth();
        float healthPercentage = Math.min(health / maxHealth, 1.0f);
        
        // –ü–æ–∑–∏—Ü–∏—è –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –º–æ–±–∞
        Vec3 entityPos = entity.position();
        double x = entityPos.x - cameraPos.x;
        double y = entityPos.y + entity.getBbHeight() + BAR_Y_OFFSET - cameraPos.y;
        double z = entityPos.z - cameraPos.z;
        
        poseStack.pushPose();
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–¥ –º–æ–±–æ–º
        poseStack.translate(x, y, z);
        
        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –ø–æ–ª–æ—Å–∞ –≤—Å–µ–≥–¥–∞ —Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ –∫–∞–º–µ—Ä—É
        poseStack.mulPose(com.mojang.math.Axis.YP.rotationDegrees(-cameraYaw));
        poseStack.mulPose(com.mojang.math.Axis.XP.rotationDegrees(cameraPitch));
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–ª–æ—Å—É (—á–µ–º –¥–∞–ª—å—à–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—É—Å—Ç—å –±—É–¥–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è)
        float scale = 0.025f;
        poseStack.scale(-scale, -scale, scale);
        
        Matrix4f matrix = poseStack.last().pose();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        RenderSystem.enableBlend();
        RenderSystem.defaultBlendFunc();
        RenderSystem.setShader(GameRenderer::getPositionColorShader);
        RenderSystem.disableDepthTest(); // –í—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞ –ø–æ–≤–µ—Ä—Ö –±–ª–æ–∫–æ–≤
        
        Tesselator tesselator = Tesselator.getInstance();
        BufferBuilder buffer = tesselator.getBuilder();
        
        // –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        buffer.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
        float bgWidth = BAR_WIDTH / scale;
        float bgHeight = BAR_HEIGHT / scale;
        
        addQuad(buffer, matrix, -bgWidth/2, 0, bgWidth/2, bgHeight, 
               0, 0, 0, 0.5f);
        tesselator.end();
        
        // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω (–ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
        buffer.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
        float padding = bgWidth * 0.05f;
        float innerWidth = bgWidth - padding * 2;
        float innerHeight = bgHeight - padding * 2;
        
        addQuad(buffer, matrix, 
               -innerWidth/2, padding, 
               innerWidth/2, bgHeight - padding,
               0.8f, 0.0f, 0.0f, 0.8f);
        tesselator.end();
        
        // –ó–µ–ª–µ–Ω–∞—è –ø–æ–ª–æ—Å–∞ (—Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
        buffer.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
        float healthWidth = innerWidth * healthPercentage;
        
        // –¶–≤–µ—Ç –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –∫ –∂–µ–ª—Ç–æ–º—É –∫ –∫—Ä–∞—Å–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
        float r = healthPercentage < 0.5f ? 1.0f : 1.0f - (healthPercentage - 0.5f) * 2.0f;
        float g = healthPercentage > 0.5f ? 1.0f : healthPercentage * 2.0f;
        float b = 0.0f;
        
        addQuad(buffer, matrix,
               -innerWidth/2, padding,
               -innerWidth/2 + healthWidth, bgHeight - padding,
               r, g, b, 0.9f);
        tesselator.end();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        RenderSystem.enableDepthTest();
        RenderSystem.disableBlend();
        
        poseStack.popPose();
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –±—É—Ñ–µ—Ä
     */
    private static void addQuad(BufferBuilder buffer, Matrix4f matrix, 
                               float x1, float y1, float x2, float y2,
                               float r, float g, float b, float a) {
        buffer.vertex(matrix, x1, y1, 0).color(r, g, b, a).endVertex();
        buffer.vertex(matrix, x1, y2, 0).color(r, g, b, a).endVertex();
        buffer.vertex(matrix, x2, y2, 0).color(r, g, b, a).endVertex();
        buffer.vertex(matrix, x2, y1, 0).color(r, g, b, a).endVertex();
    }
}

