package com.cursormod.block;

import com.cursormod.block.entity.PigSpawnerBlockEntity;
import com.cursormod.entity.ExplodingPig;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.Explosion;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.state.BlockState;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä–∞-3000 - –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–∞–∂–µ —Ö–∞–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
 * üê∑üí£üß™
 */
@DisplayName("üê∑üè≠ –¢–µ—Å—Ç—ã –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä–∞-3000")
class PigSpawnerBlockTest {

    private PigSpawnerBlock pigSpawner;
    
    @Mock
    private Level mockLevel;
    
    @Mock
    private BlockState mockState;
    
    @Mock
    private Explosion mockExplosion;
    
    private BlockPos testPos;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        pigSpawner = ModBlocks.PIG_SPAWNER instanceof PigSpawnerBlock ? 
                     (PigSpawnerBlock) ModBlocks.PIG_SPAWNER : null;
        testPos = new BlockPos(100, 64, 100);
        
        assertNotNull(pigSpawner, "üê∑üè≠ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    @Test
    @DisplayName("üõ°Ô∏è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—É—è–∑–≤–∏–º –∫ –≤–∑—Ä—ã–≤–∞–º")
    void testExplosionResistance() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä-3000 –≤ –º–∏—Ä–µ
        float resistance = pigSpawner.getExplosionResistance();
        
        // Then: –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ —É bedrock
        assertEquals(3600000.0F, resistance, 
            "üí™ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–∑—Ä—ã–≤–∞–º!");
        assertTrue(resistance >= 3600000.0F, 
            "üõ°Ô∏è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –ø—Ä–æ—á–Ω–µ–µ bedrock... –∏–ª–∏ —Ö–æ—Ç—è –±—ã —Ç–∞–∫–æ–π –∂–µ!");
    }

    @Test
    @DisplayName("üí£ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–∞–¥–∞—Ç—å –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ")
    void testNoDropFromExplosion() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä-3000 –∏ –≤–∑—Ä—ã–≤
        boolean shouldDrop = pigSpawner.dropFromExplosion(mockExplosion);
        
        // Then: –ù–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–∞–¥–∞—Ç—å
        assertFalse(shouldDrop, 
            "üö´ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –≤–µ—á–µ–Ω! –û–Ω –Ω–µ –≤—ã–ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –≤–∑—Ä—ã–≤–∞—Ö!");
    }

    @Test
    @DisplayName("üè≠ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å BlockEntity")
    void testCreatesBlockEntity() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—â—ë–Ω –≤ –º–∏—Ä–µ
        var blockEntity = pigSpawner.newBlockEntity(testPos, mockState);
        
        // Then: –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BlockEntity
        assertNotNull(blockEntity, 
            "‚öôÔ∏è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å BlockEntity!");
        assertTrue(blockEntity instanceof PigSpawnerBlockEntity, 
            "üè≠ BlockEntity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ PigSpawnerBlockEntity!");
    }

    @Test
    @DisplayName("üì¶ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π render shape")
    void testRenderShape() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –≤ –º–∏—Ä–µ
        when(mockState.getBlock()).thenReturn(pigSpawner);
        var renderShape = pigSpawner.getRenderShape(mockState);
        
        // Then: –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MODEL —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        assertEquals(net.minecraft.world.level.block.RenderShape.MODEL, renderShape,
            "üé® –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∫–∞–∫ –º–æ–¥–µ–ª—å!");
    }

    @Test
    @DisplayName("üî¢ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏")
    void testBlockStrength() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        // –≠—Ç–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤
        assertNotNull(pigSpawner, 
            "üí™ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ BaseEntityBlock (—á–µ—Ä–µ–∑ —Ç–∏–ø)
        assertTrue(pigSpawner instanceof net.minecraft.world.level.block.BaseEntityBlock,
            "üèóÔ∏è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å BaseEntityBlock!");
    }

    @Test
    @DisplayName("‚è∞ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ticker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    void testHasServerTicker() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –∏ —É—Å–ª–æ–≤–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        when(mockLevel.isClientSide).thenReturn(false);
        
        var ticker = pigSpawner.getTicker(mockLevel, mockState, 
            com.cursormod.block.entity.ModBlockEntities.PIG_SPAWNER_BLOCK_ENTITY);
        
        // Then: –î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ticker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        assertNotNull(ticker, 
            "‚è∞ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Ç–∏–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Å–≤–∏–Ω–µ–π!");
    }

    @Test
    @DisplayName("üí§ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –ù–ï –¥–æ–ª–∂–µ–Ω —Ç–∏–∫–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ")
    void testNoClientTicker() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –∏ —É—Å–ª–æ–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        when(mockLevel.isClientSide).thenReturn(true);
        
        var ticker = pigSpawner.getTicker(mockLevel, mockState, 
            com.cursormod.block.entity.ModBlockEntities.PIG_SPAWNER_BLOCK_ENTITY);
        
        // Then: –ù–ï –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ticker –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        assertNull(ticker, 
            "üí§ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Ç–∏–∫–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ - —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!");
    }

    @Test
    @DisplayName("üÜî –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID")
    void testBlockId() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        var registry = net.minecraft.core.registries.BuiltInRegistries.BLOCK;
        var id = registry.getKey(pigSpawner);
        
        // Then: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cursor:pig_spawner
        assertNotNull(id, "üîñ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ResourceLocation!");
        assertEquals("cursor", id.getNamespace(), 
            "üìõ Namespace –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'cursor'!");
        assertEquals("pig_spawner", id.getPath(), 
            "üìõ Path –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'pig_spawner'!");
    }

    @Test
    @DisplayName("üß± –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ ModBlocks")
    void testRegisteredInModBlocks() {
        // Then: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ModBlocks
        assertNotNull(ModBlocks.PIG_SPAWNER, 
            "üì¶ PIG_SPAWNER –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ ModBlocks!");
        assertSame(pigSpawner, ModBlocks.PIG_SPAWNER,
            "üîó PIG_SPAWNER –≤ ModBlocks –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –∂–µ –æ–±—ä–µ–∫—Ç–æ–º!");
    }

    @Test
    @DisplayName("üéØ –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å codec")
    void testHasCodec() {
        // Given: –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        var codec = pigSpawner.codec();
        
        // Then: Codec –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null
        assertNotNull(codec, 
            "üìù –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å codec –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏!");
    }
}

