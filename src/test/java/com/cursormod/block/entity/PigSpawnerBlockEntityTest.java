package com.cursormod.block.entity;

import com.cursormod.block.ModBlocks;
import com.cursormod.entity.ExplodingPig;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.level.block.state.BlockState;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è BlockEntity –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä–∞-3000
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã —Ö–∞–æ—Å–∞! ‚öôÔ∏èüê∑
 */
@DisplayName("‚öôÔ∏è –¢–µ—Å—Ç—ã PigSpawnerBlockEntity")
class PigSpawnerBlockEntityTest {

    private PigSpawnerBlockEntity blockEntity;
    
    @Mock
    private ServerLevel mockLevel;
    
    @Mock
    private BlockState mockState;
    
    private BlockPos testPos;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        testPos = new BlockPos(0, 64, 0);
        blockEntity = new PigSpawnerBlockEntity(testPos, mockState);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ —É—Ä–æ–≤–Ω—è
        when(mockLevel.isClientSide).thenReturn(false);
    }

    @Test
    @DisplayName("üèóÔ∏è BlockEntity –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    void testBlockEntityCreation() {
        // Then: BlockEntity —Å–æ–∑–¥–∞–Ω
        assertNotNull(blockEntity, 
            "‚öôÔ∏è PigSpawnerBlockEntity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω!");
        assertEquals(testPos, blockEntity.getBlockPos(),
            "üìç –ü–æ–∑–∏—Ü–∏—è BlockEntity –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å!");
    }

    @Test
    @DisplayName("üíæ BlockEntity –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ NBT")
    void testSaveToNBT() {
        // Given: BlockEntity —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        CompoundTag tag = new CompoundTag();
        
        // When: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        blockEntity.saveAdditional(tag);
        
        // Then: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ NBT
        assertTrue(tag.contains("TickCounter"), 
            "‚è±Ô∏è TickCounter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ NBT!");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
        int tickCounter = tag.getInt("TickCounter");
        assertTrue(tickCounter >= 0, 
            "‚è±Ô∏è TickCounter –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!");
    }

    @Test
    @DisplayName("üìñ BlockEntity –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ NBT")
    void testLoadFromNBT() {
        // Given: NBT —Å –¥–∞–Ω–Ω—ã–º–∏
        CompoundTag tag = new CompoundTag();
        tag.putInt("TickCounter", 42);
        
        // When: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        blockEntity.load(tag);
        
        // Then: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        // (–º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ, –Ω–æ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å)
        CompoundTag savedTag = new CompoundTag();
        blockEntity.saveAdditional(savedTag);
        
        assertEquals(42, savedTag.getInt("TickCounter"),
            "‚è±Ô∏è TickCounter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ NBT!");
    }

    @Test
    @DisplayName("üîÑ BlockEntity –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ü–∏–∫–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫")
    void testTickCounterCycles() {
        // Given: BlockEntity —Å –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–º —Å—á—ë—Ç—á–∏–∫–æ–º
        CompoundTag tag = new CompoundTag();
        tag.putInt("TickCounter", 99);
        blockEntity.load(tag);
        
        // When: –î–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ç–∏–∫
        PigSpawnerBlockEntity.tick(mockLevel, testPos, mockState, blockEntity);
        
        // Then: –°—á—ë—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è (—Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç–∏–≥ 100)
        CompoundTag savedTag = new CompoundTag();
        blockEntity.saveAdditional(savedTag);
        
        // –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100 —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ 0
        int tickCounter = savedTag.getInt("TickCounter");
        assertTrue(tickCounter == 0 || tickCounter == 100,
            "‚è±Ô∏è TickCounter –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞!");
    }

    @Test
    @DisplayName("üéÆ Tick –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ")
    void testTickDoesNothingOnClient() {
        // Given: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
        when(mockLevel.isClientSide).thenReturn(true);
        
        CompoundTag tagBefore = new CompoundTag();
        blockEntity.saveAdditional(tagBefore);
        
        // When: –ü—ã—Ç–∞–µ–º—Å—è —Ç–∏–∫–Ω—É—Ç—å
        PigSpawnerBlockEntity.tick(mockLevel, testPos, mockState, blockEntity);
        
        // Then: –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        CompoundTag tagAfter = new CompoundTag();
        blockEntity.saveAdditional(tagAfter);
        
        assertEquals(tagBefore.getInt("TickCounter"), tagAfter.getInt("TickCounter"),
            "üí§ –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ —Ç–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ!");
    }

    @Test
    @DisplayName("üÜî BlockEntity –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø")
    void testBlockEntityType() {
        // Then: –¢–∏–ø –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        assertEquals(ModBlockEntities.PIG_SPAWNER_BLOCK_ENTITY, 
                     blockEntity.getType(),
            "üîñ –¢–∏–ø BlockEntity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PIG_SPAWNER_BLOCK_ENTITY!");
    }

    @Test
    @DisplayName("üìç BlockEntity –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é")
    void testBlockEntityPosition() {
        // Given: BlockEntity —Å–æ–∑–¥–∞–Ω —Å –ø–æ–∑–∏—Ü–∏–µ–π
        BlockPos pos = new BlockPos(123, 45, 678);
        var entity = new PigSpawnerBlockEntity(pos, mockState);
        
        // Then: –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å
        assertEquals(pos, entity.getBlockPos(),
            "üìç BlockEntity –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é!");
    }

    @Test
    @DisplayName("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–≤–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100 —Ç–∏–∫–æ–≤ (5 —Å–µ–∫—É–Ω–¥)")
    void testSpawnInterval() {
        // Given: BlockEntity –∫–æ—Ç–æ—Ä—ã–π –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ –∫ —Å–ø–∞–≤–Ω—É
        CompoundTag tag = new CompoundTag();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏ 99 —Ç–∏–∫–∞—Ö —Å–ø–∞–≤–Ω –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        tag.putInt("TickCounter", 99);
        blockEntity.load(tag);
        
        // –¢–∏–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ - –¥–æ–ª–∂–µ–Ω —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
        PigSpawnerBlockEntity.tick(mockLevel, testPos, mockState, blockEntity);
        
        CompoundTag savedTag = new CompoundTag();
        blockEntity.saveAdditional(savedTag);
        
        // –ü–æ—Å–ª–µ 100 —Ç–∏–∫–æ–≤ —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
        int tickCounter = savedTag.getInt("TickCounter");
        assertTrue(tickCounter < 100,
            "‚è∞ –ü–æ—Å–ª–µ 100 —Ç–∏–∫–æ–≤ (5 —Å–µ–∫—É–Ω–¥) –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–ø–∞–≤–Ω –∏ —Å–±—Ä–æ—Å!");
    }

    @Test
    @DisplayName("üß± BlockEntity –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º")
    void testCorrectBlock() {
        // Given: BlockEntity –¥–ª—è –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä–∞
        when(mockState.getBlock()).thenReturn(ModBlocks.PIG_SPAWNER);
        
        // Then: –ë–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–≤–∏–Ω–æ–º–∞—Ç–æ—Ä–æ–º
        assertSame(ModBlocks.PIG_SPAWNER, mockState.getBlock(),
            "üè≠ BlockEntity –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å PigSpawnerBlock!");
    }

    @Test
    @DisplayName("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º–∏")
    void testSaveLoadIdempotent() {
        // Given: BlockEntity —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        CompoundTag tag1 = new CompoundTag();
        tag1.putInt("TickCounter", 77);
        blockEntity.load(tag1);
        
        // When: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        CompoundTag savedTag = new CompoundTag();
        blockEntity.saveAdditional(savedTag);
        
        PigSpawnerBlockEntity newEntity = new PigSpawnerBlockEntity(testPos, mockState);
        newEntity.load(savedTag);
        
        // Then: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
        CompoundTag finalTag = new CompoundTag();
        newEntity.saveAdditional(finalTag);
        
        assertEquals(savedTag.getInt("TickCounter"), finalTag.getInt("TickCounter"),
            "üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ!");
    }
}

