package com.cursormod.entity;

import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.level.Level;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –≤–∑—Ä—ã–≤–Ω—ã—Ö —Å–≤–∏–Ω–µ–π - –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–∞–∂–µ –±–æ–º–±—ã –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!
 * üê∑üí£üß™
 */
@DisplayName("üê∑üí£ –¢–µ—Å—Ç—ã ExplodingPig")
class ExplodingPigTest {

    private ExplodingPig explodingPig;
    
    @Mock
    private Level mockLevel;
    
    @Mock
    private DamageSource mockDamageSource;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(mockLevel.isClientSide).thenReturn(false);
        
        explodingPig = new ExplodingPig(ModEntities.EXPLODING_PIG, mockLevel);
    }

    @Test
    @DisplayName("üê∑ –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è")
    void testExplodingPigCreation() {
        // Then: –°–≤–∏–Ω—å—è —Å–æ–∑–¥–∞–Ω–∞
        assertNotNull(explodingPig, 
            "üê∑ ExplodingPig –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞!");
        assertTrue(explodingPig instanceof net.minecraft.world.entity.animal.Pig,
            "üê∑ ExplodingPig –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å Pig!");
    }

    @Test
    @DisplayName("ü™Ç –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è")
    void testNoCauseFallDamage() {
        // Given: –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –ø–∞–¥–∞–µ—Ç —Å –≤—ã—Å–æ—Ç—ã
        float fallDistance = 100.0F;
        float multiplier = 1.0F;
        
        // When: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è
        boolean tookDamage = explodingPig.causeFallDamage(fallDistance, multiplier, mockDamageSource);
        
        // Then: –ù–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å —É—Ä–æ–Ω
        assertFalse(tookDamage, 
            "ü™Ç –í–∑—Ä—ã–≤–Ω—ã–µ —Å–≤–∏–Ω—å–∏ –Ω–µ –±–æ—è—Ç—Å—è –ø–∞–¥–µ–Ω–∏—è!");
    }

    @Test
    @DisplayName("üõ°Ô∏è –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ—É—è–∑–≤–∏–º–∞ –∫ —É—Ä–æ–Ω—É –æ—Ç –ø–∞–¥–µ–Ω–∏—è")
    void testInvulnerableToFallDamage() {
        // Given: –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞ - –ø–∞–¥–µ–Ω–∏–µ
        when(mockDamageSource.equals(explodingPig.damageSources().fall())).thenReturn(true);
        
        // When: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
        boolean isInvulnerable = explodingPig.isInvulnerableTo(explodingPig.damageSources().fall());
        
        // Then: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ—É—è–∑–≤–∏–º–∞
        assertTrue(isInvulnerable, 
            "üõ°Ô∏è –í–∑—Ä—ã–≤–Ω—ã–µ —Å–≤–∏–Ω—å–∏ –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è!");
    }

    @Test
    @DisplayName("‚è±Ô∏è –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ç–∞–π–º–µ—Ä –¥–æ –≤–∑—Ä—ã–≤–∞")
    void testHasExplosionTimer() {
        // Given: –ù–æ–≤–∞—è –≤–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è
        ExplodingPig pig = new ExplodingPig(ModEntities.EXPLODING_PIG, mockLevel);
        
        // Then: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ (—Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
        assertNotNull(pig, 
            "‚è±Ô∏è –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∞–π–º–µ—Ä –≤–∑—Ä—ã–≤–∞!");
    }

    @Test
    @DisplayName("üë∂ –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è")
    void testGenerationSupport() {
        // Given: –°–≤–∏–Ω—å—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π
        ExplodingPig generation0 = new ExplodingPig(ModEntities.EXPLODING_PIG, mockLevel, 0);
        ExplodingPig generation1 = new ExplodingPig(ModEntities.EXPLODING_PIG, mockLevel, 1);
        ExplodingPig generation2 = new ExplodingPig(ModEntities.EXPLODING_PIG, mockLevel, 2);
        
        // Then: –í—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã
        assertNotNull(generation0, "üëµ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 0 –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!");
        assertNotNull(generation1, "üë∂ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 1 –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!");
        assertNotNull(generation2, "üê£ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 2 –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å!");
        
        // –ü–æ—Ä–æ—Å—è—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–ª—ã—à–∞–º–∏
        assertTrue(generation1.isBaby(), 
            "üë∂ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 1 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–º!");
        assertTrue(generation2.isBaby(), 
            "üë∂ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 2 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–º!");
    }

    @Test
    @DisplayName("üÜî –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π EntityType")
    void testCorrectEntityType() {
        // Then: –¢–∏–ø –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å
        assertEquals(ModEntities.EXPLODING_PIG, explodingPig.getType(),
            "üîñ EntityType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å EXPLODING_PIG!");
    }

    @Test
    @DisplayName("üê∑ –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    void testEntityRegistered() {
        // Then: EntityType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ null
        assertNotNull(ModEntities.EXPLODING_PIG,
            "üì¶ EXPLODING_PIG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    }

    @Test
    @DisplayName("üí® –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è")
    void testCanMove() {
        // Given: –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è
        // Then: –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂–∏–≤–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–≤–∏–∂–µ–Ω–∏—è
        assertNotNull(explodingPig.getDeltaMovement(),
            "üí® –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è!");
    }

    @Test
    @DisplayName("üåç –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å —Å–≤–æ–π Level")
    void testKnowsLevel() {
        // Then: –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å —Å–≤–æ–π –º–∏—Ä
        assertNotNull(explodingPig.level(),
            "üåç –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å —Å–≤–æ–π Level!");
    }

    @Test
    @DisplayName("üìç –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–∑–∏—Ü–∏—é")
    void testHasPosition() {
        // Then: –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        assertNotNull(explodingPig.position(),
            "üìç –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–∑–∏—Ü–∏—é!");
    }

    @Test
    @DisplayName("üèÉ –í–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–∞–Ω–∏–∫–∏")
    void testInPanicMode() {
        // Given: –¢–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤–∑—Ä—ã–≤–Ω–∞—è —Å–≤–∏–Ω—å—è
        // Then: –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å (—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ª–æ–≥–∞–º–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
        assertNotNull(explodingPig.getBrain(),
            "üß† –°–≤–∏–Ω—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å brain –¥–ª—è –ø–∞–Ω–∏–∫–∏!");
    }
}

