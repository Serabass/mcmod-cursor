package com.cursormod.entity;

import com.cursormod.Cursor;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.animal.Pig;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.Explosion;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.ChatFormatting;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.core.BlockPos;

public class ExplodingPig extends Pig {
    
    private static final EntityDataAccessor<Integer> FUSE_TIME = 
        SynchedEntityData.defineId(ExplodingPig.class, EntityDataSerializers.INT);
    
    private int ticksUntilExplosion;
    private boolean isExploding = false;
    private boolean hasSpawnedPiglets = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å –ø–æ—Ä–æ—Å—è—Ç –¥–≤–∞–∂–¥—ã
    private int ticksAlive = 0; // –°—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–≤–∏–Ω—å–∏
    private int generation = 0; // –ü–æ–∫–æ–ª–µ–Ω–∏–µ —Å–≤–∏–Ω—å–∏ (0 - –º–∞–º–∞, 1 - –ø–æ—Ä–æ—Å—ë–Ω–æ–∫, 2 - –ø–æ—Ä–æ—Å—ë–Ω–æ–∫ –ø–æ—Ä–æ—Å—ë–Ω–∫–∞)
    
    public ExplodingPig(EntityType<? extends Pig> entityType, Level level) {
        super(entityType, level);
        // –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –≤–∑—Ä—ã–≤–∞ –æ—Ç 2 –¥–æ 10 —Å–µ–∫—É–Ω–¥ (40-200 —Ç–∏–∫–æ–≤)
        this.ticksUntilExplosion = 40 + level.random.nextInt(161);
        
        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–∞–Ω–∏–∫–∏ - —Å–≤–∏–Ω—å—è –±—É–¥–µ—Ç –±–µ–≥–∞—Ç—å –∫–∞–∫ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è!
        this.brain.setMemoryWithExpiry(
            net.minecraft.world.entity.ai.memory.MemoryModuleType.IS_PANICKING, 
            true, 
            (long)ticksUntilExplosion
        );
        
        Cursor.LOGGER.info("üê∑üí£ ExplodingPig created! Will explode in {} ticks!", ticksUntilExplosion);
    }
    
    /**
     * –í–∑—Ä—ã–≤–Ω—ã–µ —Å–≤–∏–Ω—å–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è - –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –∫—Ä—É—Ç—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ!
     */
    @Override
    public boolean causeFallDamage(float fallDistance, float multiplier, net.minecraft.world.damagesource.DamageSource damageSource) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false - –Ω–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è!
        return false;
    }
    
    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ —É—Ä–æ–Ω—É –æ—Ç –ø–∞–¥–µ–Ω–∏—è
     */
    @Override
    public boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource source) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è
        if (source == this.damageSources().fall()) {
            return true; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Ä–æ–Ω –æ—Ç –ø–∞–¥–µ–Ω–∏—è
        }
        return super.isInvulnerableTo(source);
    }
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø–æ—Ä–æ—Å—è—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è
    public ExplodingPig(EntityType<? extends Pig> entityType, Level level, int generation) {
        this(entityType, level);
        this.generation = generation;
        this.setBaby(true); // –î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–º
        Cursor.LOGGER.info("üêñüí£ ExplodingPig generation {} created!", generation);
    }
    
    @Override
    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(FUSE_TIME, 0);
    }
    
    @Override
    public void tick() {
        super.tick();
        
        if (!this.level().isClientSide() && !isExploding) {
            ticksUntilExplosion--;
            ticksAlive++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            this.entityData.set(FUSE_TIME, ticksUntilExplosion);
            
            // –°–ø–∞–≤–Ω–∏–º –ø–æ—Ä–æ—Å—è—Ç —á–µ—Ä–µ–∑ 40 —Ç–∏–∫–æ–≤ (2 —Å–µ–∫—É–Ω–¥—ã) –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            if (!hasSpawnedPiglets && ticksAlive >= 40) {
                spawnPiglets();
                hasSpawnedPiglets = true;
            }
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥—ã–º–∞ –∫–æ–≥–¥–∞ –±–ª–∏–∑–∫–æ –∫ –≤–∑—Ä—ã–≤—É
            if (ticksUntilExplosion < 40) {
                if (this.level() instanceof ServerLevel serverLevel) {
                    serverLevel.sendParticles(ParticleTypes.SMOKE, 
                        this.getX(), this.getY() + 0.5, this.getZ(), 
                        2, 0.1, 0.1, 0.1, 0.01);
                }
            }
            
            // –í–∑—Ä—ã–≤!
            if (ticksUntilExplosion <= 0) {
                explode();
            }
        }
        
        // –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ —Å–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        if (this.level().isClientSide()) {
            int fuseTime = this.entityData.get(FUSE_TIME);
            if (fuseTime < 40 && fuseTime > 0) {
                // –ö—Ä–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∫–æ–≥–¥–∞ –±–ª–∏–∑–∫–æ –∫ –≤–∑—Ä—ã–≤—É
                this.level().addParticle(ParticleTypes.FLAME, 
                    this.getX() + (this.random.nextDouble() - 0.5) * 0.5,
                    this.getY() + this.random.nextDouble() * 0.5,
                    this.getZ() + (this.random.nextDouble() - 0.5) * 0.5,
                    0, 0, 0);
            }
        }
    }
    
    private void spawnPiglets() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–æ—Å—è—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è
        int pigletCount = 0;
        boolean shouldSpawn = false;
        
        if (generation == 0) {
            // –°–≤–∏–Ω—å—è-–º–∞–º–∞: 50% —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ 3-7 –ø–æ—Ä–æ—Å—è—Ç
            if (this.random.nextBoolean()) {
                pigletCount = 3 + this.random.nextInt(5);
                shouldSpawn = true;
            }
        } else if (generation == 1) {
            // –ü–æ—Ä–æ—Å—ë–Ω–æ–∫: 30% —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ 1-2 –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ—Ä–æ—Å—è—Ç
            if (this.random.nextFloat() < 0.3f) {
                pigletCount = 1 + this.random.nextInt(2);
                shouldSpawn = true;
            }
        }
        // generation >= 2 –Ω–µ —Å–ø–∞–≤–Ω—è—Ç –ø–æ—Ä–æ—Å—è—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã)
        
        if (shouldSpawn && pigletCount > 0) {
            Cursor.LOGGER.info("üê∑üë∂ ExplodingPig generation {} spawning {} piglets!", generation, pigletCount);
            
            for (int i = 0; i < pigletCount; i++) {
                // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä–æ—Å–µ–Ω–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                ExplodingPig piglet = new ExplodingPig(ModEntities.EXPLODING_PIG, this.level(), generation + 1);
                
                // –ü–æ–∑–∏—Ü–∏—è —Ä—è–¥–æ–º —Å–æ —Å–≤–∏–Ω—å–µ–π-–º–∞–º–æ–π
                double offsetX = (this.random.nextDouble() - 0.5) * 2.0;
                double offsetZ = (this.random.nextDouble() - 0.5) * 2.0;
                piglet.setPos(
                    this.getX() + offsetX,
                    this.getY(),
                    this.getZ() + offsetZ
                );
                
                // –î–∞–µ–º –ø–æ—Ä–æ—Å–µ–Ω–∫—É –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (—Ä–∞–∑–±–µ–≥–∞—é—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—ã)
                piglet.setDeltaMovement(
                    offsetX * 0.3,
                    0.3,
                    offsetZ * 0.3
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∏—Ä
                this.level().addFreshEntity(piglet);
                
                // –ó–≤—É–∫ —Å–≤–∏–Ω—å–∏ (–≤—ã—à–µ —Ç–æ–Ω –¥–ª—è –ø–æ—Ä–æ—Å—è—Ç)
                float pitch = 1.5F + (generation * 0.3F); // –ß–µ–º –º–µ–Ω—å—à–µ –ø–æ—Ä–æ—Å—ë–Ω–æ–∫, —Ç–µ–º –≤—ã—à–µ –≥–æ–ª–æ—Å
                piglet.playSound(net.minecraft.sounds.SoundEvents.PIG_AMBIENT, 1.0F, pitch);
            }
            
            // –ó–≤—É–∫ —Å–≤–∏–Ω—å–∏-—Ä–æ–¥–∏—Ç–µ–ª—è
            this.playSound(net.minecraft.sounds.SoundEvents.PIG_AMBIENT, 1.5F, 0.8F + (generation * 0.2F));
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Å–µ—Ä–¥–µ—á–µ–∫ (–∫–∞–∫ –ø—Ä–∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–∏)
            if (this.level() instanceof ServerLevel serverLevel) {
                serverLevel.sendParticles(ParticleTypes.HEART, 
                    this.getX(), this.getY() + 0.5 + (generation * 0.2), this.getZ(), 
                    5 + (3 - generation) * 2, 0.5, 0.5, 0.5, 0.1);
            }
        }
    }
    
    private void explode() {
        if (!this.level().isClientSide() && !isExploding) {
            isExploding = true;
            
            Cursor.LOGGER.info("üê∑üí• ExplodingPig exploded at {}", this.blockPosition());
            
            // –°–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤ (—Å–∏–ª–∞ 2.0 - –∫–∞–∫ —É –∫—Ä–∏–ø–µ—Ä–∞)
            this.level().explode(
                this, 
                this.getX(), 
                this.getY(), 
                this.getZ(), 
                2.0F, 
                Level.ExplosionInteraction.MOB
            );
            
            // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–∏—Ü
            if (this.level() instanceof ServerLevel serverLevel) {
                serverLevel.sendParticles(ParticleTypes.EXPLOSION_EMITTER, 
                    this.getX(), this.getY(), this.getZ(), 
                    1, 0, 0, 0, 0);
                serverLevel.sendParticles(ParticleTypes.FLAME, 
                    this.getX(), this.getY(), this.getZ(), 
                    50, 1.0, 1.0, 1.0, 0.2);
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–≥–æ–Ω—å –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞! üî•
            createFireAfterExplosion();
            
            // –£–¥–∞–ª—è–µ–º —Å–≤–∏–Ω—å—é
            this.discard();
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ–≥–æ–Ω—å –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞ —Å–≤–∏–Ω—å–∏! üî•
     * –ò–Ω–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–≥–æ–Ω—å –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–∞–æ—Å–∞!
     */
    private void createFireAfterExplosion() {
        if (!(this.level() instanceof ServerLevel serverLevel)) {
            return;
        }
        
        // –®–∞–Ω—Å —Å–æ–∑–¥–∞—Ç—å –æ–≥–æ–Ω—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å–≤–∏–Ω—å–∏
        // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 0 (–º–∞–º–∞): 30% —à–∞–Ω—Å
        // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 1 (–ø–æ—Ä–æ—Å–µ–Ω–æ–∫): 50% —à–∞–Ω—Å  
        // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 2+ (–ø–æ—Ä–æ—Å–µ–Ω–æ–∫ –ø–æ—Ä–æ—Å–µ–Ω–∫–∞): 70% —à–∞–Ω—Å
        float fireChance = 0.3f + (generation * 0.2f);
        fireChance = Math.min(fireChance, 0.7f); // –ú–∞–∫—Å–∏–º—É–º 70%
        
        if (this.random.nextFloat() < fireChance) {
            Cursor.LOGGER.info("üî• ExplodingPig generation {} left fire behind! Chaos level: {}%", 
                generation, (int)(fireChance * 100));
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–Ω—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è
            // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 0: 1-3 –±–ª–æ–∫–∞ –æ–≥–Ω—è
            // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 1: 2-4 –±–ª–æ–∫–∞ –æ–≥–Ω—è
            // –ü–æ–∫–æ–ª–µ–Ω–∏–µ 2+: 3-6 –±–ª–æ–∫–æ–≤ –æ–≥–Ω—è
            int minFire = 1 + generation;
            int maxFire = 3 + (generation * 2);
            int fireBlocks = minFire + this.random.nextInt(maxFire - minFire + 1);
            
            for (int i = 0; i < fireBlocks; i++) {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 3 –±–ª–æ–∫–æ–≤ –æ—Ç –≤–∑—Ä—ã–≤–∞
                int offsetX = this.random.nextInt(7) - 3; // -3 –¥–æ +3
                int offsetZ = this.random.nextInt(7) - 3; // -3 –¥–æ +3
                
                BlockPos firePos = this.blockPosition().offset(offsetX, 0, offsetZ);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–≥–æ–Ω—å –≤ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é
                if (canPlaceFireAt(firePos)) {
                    // –°—Ç–∞–≤–∏–º –æ–≥–æ–Ω—å!
                    serverLevel.setBlock(firePos, Blocks.FIRE.defaultBlockState(), 3);
                    
                    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –æ–≥–Ω—è
                    serverLevel.sendParticles(ParticleTypes.FLAME, 
                        firePos.getX() + 0.5, firePos.getY() + 0.5, firePos.getZ() + 0.5, 
                        10, 0.2, 0.2, 0.2, 0.1);
                    
                    Cursor.LOGGER.info("üî• Fire placed at {}", firePos);
                }
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–≥–æ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    private boolean canPlaceFireAt(BlockPos pos) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –æ–≥–Ω–µ–º
        if (!this.level().getBlockState(pos).isAir()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥ –æ–≥–Ω–µ–º –µ—Å—Ç—å —Ç–≤–µ—Ä–¥—ã–π –±–ª–æ–∫
        BlockPos belowPos = pos.below();
        return this.level().getBlockState(belowPos).isSolidRender(this.level(), belowPos);
    }
    
    @Override
    public void addAdditionalSaveData(CompoundTag compound) {
        super.addAdditionalSaveData(compound);
        compound.putInt("TicksUntilExplosion", this.ticksUntilExplosion);
    }
    
    @Override
    public void readAdditionalSaveData(CompoundTag compound) {
        super.readAdditionalSaveData(compound);
        this.ticksUntilExplosion = compound.getInt("TicksUntilExplosion");
    }
    
    @Override
    public boolean isPushable() {
        return false; // –ù–µ–ª—å–∑—è —Ç–æ–ª–∫–∞—Ç—å –≤–∑—Ä—ã–≤–∞—é—â—É—é—Å—è —Å–≤–∏–Ω—å—é!
    }
    
    public static AttributeSupplier.Builder createAttributes() {
        return Pig.createAttributes()
            .add(Attributes.MAX_HEALTH, 10.0)
            .add(Attributes.MOVEMENT_SPEED, 0.35); // –ë—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–π —Å–≤–∏–Ω—å–∏!
    }
    
    @Override
    public Component getName() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ –≤–∑—Ä—ã–≤–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        int fuseTime = this.entityData.get(FUSE_TIME);
        double secondsLeft = fuseTime / 20.0; // 20 —Ç–∏–∫–æ–≤ = 1 —Å–µ–∫—É–Ω–¥–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        String timeString = String.format("%.1f", secondsLeft);
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        ChatFormatting color;
        if (secondsLeft > 5.0) {
            color = ChatFormatting.GREEN; // –ó–µ–ª—ë–Ω—ã–π - –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        } else if (secondsLeft > 2.0) {
            color = ChatFormatting.YELLOW; // –ñ—ë–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        } else {
            color = ChatFormatting.RED; // –ö—Ä–∞—Å–Ω—ã–π - –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏!
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ —ç–º–æ–¥–∑–∏ –±–æ–º–±—ã
        return Component.literal("üí£ " + timeString + "s").withStyle(color);
    }
    
    @Override
    public boolean hasCustomName() {
        return true; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è
    }
    
    @Override
    public boolean isCustomNameVisible() {
        return true; // –ò–º—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–æ
    }
}

