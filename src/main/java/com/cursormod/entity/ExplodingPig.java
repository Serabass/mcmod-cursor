package com.cursormod.entity;

import com.cursormod.Cursor;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.animal.Pig;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.Explosion;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.ChatFormatting;

public class ExplodingPig extends Pig {
    
    private static final EntityDataAccessor<Integer> FUSE_TIME = 
        SynchedEntityData.defineId(ExplodingPig.class, EntityDataSerializers.INT);
    
    private int ticksUntilExplosion;
    private boolean isExploding = false;
    private boolean hasSpawnedPiglets = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å –ø–æ—Ä–æ—Å—è—Ç –¥–≤–∞–∂–¥—ã
    private int ticksAlive = 0; // –°—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–≤–∏–Ω—å–∏
    
    public ExplodingPig(EntityType<? extends Pig> entityType, Level level) {
        super(entityType, level);
        // –†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –≤–∑—Ä—ã–≤–∞ –æ—Ç 2 –¥–æ 10 —Å–µ–∫—É–Ω–¥ (40-200 —Ç–∏–∫–æ–≤)
        this.ticksUntilExplosion = 40 + level.random.nextInt(161);
        
        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–∞–Ω–∏–∫–∏ - —Å–≤–∏–Ω—å—è –±—É–¥–µ—Ç –±–µ–≥–∞—Ç—å –∫–∞–∫ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è!
        this.brain.setMemoryWithExpiry(
            net.minecraft.world.entity.ai.memory.MemoryModuleType.IS_PANICKING, 
            true, 
            (long)ticksUntilExplosion
        );
        
        Cursor.LOGGER.info("üê∑üí£ ExplodingPig created! Will explode in {} ticks!", ticksUntilExplosion);
    }
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –ø–æ—Ä–æ—Å—è—Ç (–±–µ–∑ —Å–ø–∞–≤–Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ—Ä–æ—Å—è—Ç)
    public ExplodingPig(EntityType<? extends Pig> entityType, Level level, boolean isPiglet) {
        this(entityType, level);
        this.hasSpawnedPiglets = true; // –ü–æ—Ä–æ—Å—è—Ç–∞ –Ω–µ —Å–ø–∞–≤–Ω—è—Ç —Å–≤–æ–∏—Ö –ø–æ—Ä–æ—Å—è—Ç
        if (isPiglet) {
            this.setBaby(true); // –î–µ–ª–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–º
        }
    }
    
    @Override
    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(FUSE_TIME, 0);
    }
    
    @Override
    public void tick() {
        super.tick();
        
        if (!this.level().isClientSide() && !isExploding) {
            ticksUntilExplosion--;
            ticksAlive++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            this.entityData.set(FUSE_TIME, ticksUntilExplosion);
            
            // –°–ø–∞–≤–Ω–∏–º –ø–æ—Ä–æ—Å—è—Ç —á–µ—Ä–µ–∑ 40 —Ç–∏–∫–æ–≤ (2 —Å–µ–∫—É–Ω–¥—ã) –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            if (!hasSpawnedPiglets && ticksAlive >= 40) {
                spawnPiglets();
                hasSpawnedPiglets = true;
            }
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥—ã–º–∞ –∫–æ–≥–¥–∞ –±–ª–∏–∑–∫–æ –∫ –≤–∑—Ä—ã–≤—É
            if (ticksUntilExplosion < 40) {
                if (this.level() instanceof ServerLevel serverLevel) {
                    serverLevel.sendParticles(ParticleTypes.SMOKE, 
                        this.getX(), this.getY() + 0.5, this.getZ(), 
                        2, 0.1, 0.1, 0.1, 0.01);
                }
            }
            
            // –í–∑—Ä—ã–≤!
            if (ticksUntilExplosion <= 0) {
                explode();
            }
        }
        
        // –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ —Å–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        if (this.level().isClientSide()) {
            int fuseTime = this.entityData.get(FUSE_TIME);
            if (fuseTime < 40 && fuseTime > 0) {
                // –ö—Ä–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∫–æ–≥–¥–∞ –±–ª–∏–∑–∫–æ –∫ –≤–∑—Ä—ã–≤—É
                this.level().addParticle(ParticleTypes.FLAME, 
                    this.getX() + (this.random.nextDouble() - 0.5) * 0.5,
                    this.getY() + this.random.nextDouble() * 0.5,
                    this.getZ() + (this.random.nextDouble() - 0.5) * 0.5,
                    0, 0, 0);
            }
        }
    }
    
    private void spawnPiglets() {
        // 50% —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞ –ø–æ—Ä–æ—Å—è—Ç
        if (this.random.nextBoolean()) {
            int pigletCount = 3 + this.random.nextInt(5); // –û—Ç 3 –¥–æ 7 –ø–æ—Ä–æ—Å—è—Ç
            
            Cursor.LOGGER.info("üê∑üë∂ ExplodingPig spawning {} piglets!", pigletCount);
            
            for (int i = 0; i < pigletCount; i++) {
                // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä–æ—Å–µ–Ω–∫–∞
                ExplodingPig piglet = new ExplodingPig(ModEntities.EXPLODING_PIG, this.level(), true);
                
                // –ü–æ–∑–∏—Ü–∏—è —Ä—è–¥–æ–º —Å–æ —Å–≤–∏–Ω—å–µ–π-–º–∞–º–æ–π
                double offsetX = (this.random.nextDouble() - 0.5) * 2.0;
                double offsetZ = (this.random.nextDouble() - 0.5) * 2.0;
                piglet.setPos(
                    this.getX() + offsetX,
                    this.getY(),
                    this.getZ() + offsetZ
                );
                
                // –î–∞–µ–º –ø–æ—Ä–æ—Å–µ–Ω–∫—É –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (—Ä–∞–∑–±–µ–≥–∞—é—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—ã)
                piglet.setDeltaMovement(
                    offsetX * 0.3,
                    0.3,
                    offsetZ * 0.3
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∏—Ä
                this.level().addFreshEntity(piglet);
                
                // –ó–≤—É–∫ —Å–≤–∏–Ω—å–∏
                piglet.playSound(net.minecraft.sounds.SoundEvents.PIG_AMBIENT, 1.0F, 1.5F);
            }
            
            // –ó–≤—É–∫ —Å–≤–∏–Ω—å–∏-–º–∞–º—ã
            this.playSound(net.minecraft.sounds.SoundEvents.PIG_AMBIENT, 1.5F, 0.8F);
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Å–µ—Ä–¥–µ—á–µ–∫ (–∫–∞–∫ –ø—Ä–∏ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–∏)
            if (this.level() instanceof ServerLevel serverLevel) {
                serverLevel.sendParticles(ParticleTypes.HEART, 
                    this.getX(), this.getY() + 1.0, this.getZ(), 
                    10, 0.5, 0.5, 0.5, 0.1);
            }
        }
    }
    
    private void explode() {
        if (!this.level().isClientSide() && !isExploding) {
            isExploding = true;
            
            Cursor.LOGGER.info("üê∑üí• ExplodingPig exploded at {}", this.blockPosition());
            
            // –°–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤ (—Å–∏–ª–∞ 2.0 - –∫–∞–∫ —É –∫—Ä–∏–ø–µ—Ä–∞)
            this.level().explode(
                this, 
                this.getX(), 
                this.getY(), 
                this.getZ(), 
                2.0F, 
                Level.ExplosionInteraction.MOB
            );
            
            // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–∏—Ü
            if (this.level() instanceof ServerLevel serverLevel) {
                serverLevel.sendParticles(ParticleTypes.EXPLOSION_EMITTER, 
                    this.getX(), this.getY(), this.getZ(), 
                    1, 0, 0, 0, 0);
                serverLevel.sendParticles(ParticleTypes.FLAME, 
                    this.getX(), this.getY(), this.getZ(), 
                    50, 1.0, 1.0, 1.0, 0.2);
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–≤–∏–Ω—å—é
            this.discard();
        }
    }
    
    @Override
    public void addAdditionalSaveData(CompoundTag compound) {
        super.addAdditionalSaveData(compound);
        compound.putInt("TicksUntilExplosion", this.ticksUntilExplosion);
    }
    
    @Override
    public void readAdditionalSaveData(CompoundTag compound) {
        super.readAdditionalSaveData(compound);
        this.ticksUntilExplosion = compound.getInt("TicksUntilExplosion");
    }
    
    @Override
    public boolean isPushable() {
        return false; // –ù–µ–ª—å–∑—è —Ç–æ–ª–∫–∞—Ç—å –≤–∑—Ä—ã–≤–∞—é—â—É—é—Å—è —Å–≤–∏–Ω—å—é!
    }
    
    public static AttributeSupplier.Builder createAttributes() {
        return Pig.createAttributes()
            .add(Attributes.MAX_HEALTH, 10.0)
            .add(Attributes.MOVEMENT_SPEED, 0.35); // –ë—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–π —Å–≤–∏–Ω—å–∏!
    }
    
    @Override
    public Component getName() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ –≤–∑—Ä—ã–≤–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        int fuseTime = this.entityData.get(FUSE_TIME);
        double secondsLeft = fuseTime / 20.0; // 20 —Ç–∏–∫–æ–≤ = 1 —Å–µ–∫—É–Ω–¥–∞
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        String timeString = String.format("%.1f", secondsLeft);
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        ChatFormatting color;
        if (secondsLeft > 5.0) {
            color = ChatFormatting.GREEN; // –ó–µ–ª—ë–Ω—ã–π - –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        } else if (secondsLeft > 2.0) {
            color = ChatFormatting.YELLOW; // –ñ—ë–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        } else {
            color = ChatFormatting.RED; // –ö—Ä–∞—Å–Ω—ã–π - –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏!
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ —ç–º–æ–¥–∑–∏ –±–æ–º–±—ã
        return Component.literal("üí£ " + timeString + "s").withStyle(color);
    }
    
    @Override
    public boolean hasCustomName() {
        return true; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è
    }
    
    @Override
    public boolean isCustomNameVisible() {
        return true; // –ò–º—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–æ
    }
}

