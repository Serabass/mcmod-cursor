package com.cursormod.entity;

import com.cursormod.Cursor;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.projectile.ThrowableItemProjectile;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.EntityHitResult;
import net.minecraft.world.phys.HitResult;
import net.minecraft.world.phys.Vec3;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.InteractionHand;
import com.cursormod.item.ModItems;

public class ThorHammerProjectile extends ThrowableItemProjectile {
    
    private boolean isReturning = false;
    private Vec3 startPosition;
    private static final double MAX_DISTANCE = 20.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ 20 –±–ª–æ–∫–æ–≤
    private static final int MAX_FLIGHT_TIME = 200; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    public ThorHammerProjectile(EntityType<? extends ThorHammerProjectile> entityType, Level level) {
        super(entityType, level);
    }
    
    public ThorHammerProjectile(Level level, LivingEntity shooter) {
        super(ModEntities.THOR_HAMMER_PROJECTILE, shooter, level);
        this.startPosition = shooter.position();
    }
    
    @Override
    protected Item getDefaultItem() {
        return ModItems.THOR_HAMMER;
    }
    
    @Override
    protected void onHitEntity(EntityHitResult hitResult) {
        super.onHitEntity(hitResult);
        
        if (!this.level().isClientSide()) {
            // –ù–∞–Ω–æ—Å–∏–º —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω - –º–æ–ª–æ—Ç –¢–æ—Ä–∞ —É–±–∏–≤–∞–µ—Ç —Å –æ–¥–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è!
            float damage = 1000.0F; // –°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω - –±–æ–ª—å—à–µ —á–µ–º —É –ª—é–±–æ–≥–æ –º–æ–±–∞
            hitResult.getEntity().hurt(this.damageSources().thrown(this, this.getOwner()), damage);
            
            // –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ –ø–æ–ø–∞–¥–∞–Ω–∏—è
            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), 
                SoundEvents.LIGHTNING_BOLT_THUNDER, SoundSource.NEUTRAL, 1.0F, 0.8F);
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–ª–Ω–∏–∏
            createLightningEffects();
            
            // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            startReturn();
            
            Cursor.LOGGER.info("üíÄ‚ö° Thor's hammer OBLITERATED {} with {} damage! One hit kill!", 
                hitResult.getEntity().getType().getDescription().getString(), damage);
        }
    }
    
    @Override
    protected void onHit(HitResult hitResult) {
        super.onHit(hitResult);
        
        if (!this.level().isClientSide()) {
            // –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –±–ª–æ–∫
            this.level().playSound(null, this.getX(), this.getY(), this.getZ(), 
                SoundEvents.ANVIL_LAND, SoundSource.NEUTRAL, 1.0F, 1.2F);
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —É–¥–∞—Ä–∞
            createHitEffects();
            
            // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –±–ª–æ–∫
            startReturn();
            
            Cursor.LOGGER.info("üî® Thor's hammer hit block at: {}", this.blockPosition());
        }
    }
    
    private void createLightningEffects() {
        if (this.level() instanceof ServerLevel serverLevel) {
            // –ú–æ–ª–Ω–∏—è –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∏—Å–∫—Ä—ã
            serverLevel.sendParticles(ParticleTypes.ELECTRIC_SPARK, 
                this.getX(), this.getY(), this.getZ(), 30, 0.5, 0.5, 0.5, 0.2);
            serverLevel.sendParticles(ParticleTypes.CRIT, 
                this.getX(), this.getY(), this.getZ(), 15, 0.3, 0.3, 0.3, 0.1);
            serverLevel.sendParticles(ParticleTypes.ENCHANT, 
                this.getX(), this.getY(), this.getZ(), 10, 0.2, 0.2, 0.2, 0.05);
        }
    }
    
    private void createHitEffects() {
        if (this.level() instanceof ServerLevel serverLevel) {
            // –≠—Ñ—Ñ–µ–∫—Ç—ã —É–¥–∞—Ä–∞ –æ –±–ª–æ–∫
            serverLevel.sendParticles(ParticleTypes.EXPLOSION, 
                this.getX(), this.getY(), this.getZ(), 5, 0.1, 0.1, 0.1, 0.1);
            serverLevel.sendParticles(ParticleTypes.CRIT, 
                this.getX(), this.getY(), this.getZ(), 8, 0.2, 0.2, 0.2, 0.1);
        }
    }
    
    private void startReturn() {
        this.isReturning = true;
        Cursor.LOGGER.info("üî® Thor's hammer started returning to owner!");
    }
    
    @Override
    public void tick() {
        super.tick();
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥ –∏–∑ —á–∞—Å—Ç–∏—Ü –∑–∞ –ª–µ—Ç—è—â–∏–º –º–æ–ª–æ—Ç–æ–º
        if (this.level() instanceof ServerLevel serverLevel && this.tickCount % 3 == 0) {
            serverLevel.sendParticles(ParticleTypes.ELECTRIC_SPARK, 
                this.getX(), this.getY(), this.getZ(), 2, 0.0, 0.0, 0.0, 0.0);
        }
        
        if (!this.level().isClientSide()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ª–µ—Ç–µ–ª –ª–∏ –º–æ–ª–æ—Ç —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (20 –±–ª–æ–∫–æ–≤)
            if (!this.isReturning && this.startPosition != null) {
                double distanceFromStart = this.position().distanceTo(this.startPosition);
                if (distanceFromStart >= MAX_DISTANCE) {
                    Cursor.LOGGER.info("üî® Thor's hammer reached max distance ({} blocks), returning!", MAX_DISTANCE);
                    startReturn();
                }
            }
            
            // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            if (this.isReturning && this.getOwner() instanceof Player player) {
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É
                Vec3 ownerPos = player.position().add(0, player.getEyeHeight(), 0);
                Vec3 hammerPos = this.position();
                Vec3 direction = ownerPos.subtract(hammerPos).normalize();
                
                // –£—Å–∫–æ—Ä—è–µ–º –º–æ–ª–æ—Ç –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É
                this.setDeltaMovement(direction.scale(1.2)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –º–æ–ª–æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if (this.distanceTo(player) < 2.0) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–ª–æ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    if (!player.getInventory().add(new ItemStack(ModItems.THOR_HAMMER))) {
                        // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                        player.drop(new ItemStack(ModItems.THOR_HAMMER), false);
                    }
                    
                    // –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    this.level().playSound(null, player.getX(), player.getY(), player.getZ(), 
                        SoundEvents.TRIDENT_RETURN, SoundSource.PLAYERS, 1.0F, 1.0F);
                    
                    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
                    if (this.level() instanceof ServerLevel serverLevel) {
                        Vec3 pos = player.position();
                        serverLevel.sendParticles(ParticleTypes.ELECTRIC_SPARK, 
                            pos.x, pos.y + 1.0, pos.z, 25, 0.5, 0.5, 0.5, 0.1);
                        serverLevel.sendParticles(ParticleTypes.ENCHANT, 
                            pos.x, pos.y + 1.0, pos.z, 15, 0.3, 0.3, 0.3, 0.05);
                    }
                    
                    Cursor.LOGGER.info("‚ö° Thor's hammer returned to {}!", player.getName().getString());
                    
                    // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥
                    this.discard();
                    return;
                }
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥ —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è
            if (this.tickCount > MAX_FLIGHT_TIME) {
                Cursor.LOGGER.info("üî® Thor's hammer timed out, returning!");
                if (!this.isReturning) {
                    startReturn();
                } else {
                    this.discard();
                }
            }
        }
    }
    
    @Override
    protected float getGravity() {
        return 0.0F; // –ú–æ–ª–æ—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
    }
}
